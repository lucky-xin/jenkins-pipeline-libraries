kind: Deployment
apiVersion: apps/v1
metadata:
  name: fe-${APP_NAME}
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: fe-${APP_NAME}
    app.kubernetes.io/version: ${VERSION}
    app.xyz.ink/name: fe-${APP_NAME}
    app.xyz.ink/project: ${APP_NAME}
    app.xyz.ink/version: ${VERSION}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fe-${APP_NAME}
      app.xyz.ink/name: fe-${APP_NAME}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fe-${APP_NAME}
        app.xyz.ink/name: fe-${APP_NAME}
      annotations:
        log.piston.ink/workflow: cloud.web.xyz
    spec:
      containers:
        - name: fe-${APP_NAME}
          image: ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${VERSION}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: TZ
              value: Asia/Shanghai
          resources:
            limits:
              cpu: 500m
              memory: 1000Mi
            requests:
              cpu: 200m
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            timeoutSeconds: 3
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 30
          lifecycle:
            preStop:
              exec:
                command:
                  - sh
                  - '-c'
                  - sleep 10
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
      restartPolicy: Always
      terminationGracePeriodSeconds: 150
      dnsPolicy: ClusterFirst
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        runAsNonRoot: true
        fsGroup: 101
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
kind: Service
apiVersion: v1
metadata:
  name: fe-${APP_NAME}
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: fe-${APP_NAME}
    app.kubernetes.io/version: ${VERSION}
    app.xyz.ink/name: fe-${APP_NAME}
    app.xyz.ink/version: ${VERSION}
spec:
  ports:
    - name: http
      protocol: TCP
      appProtocol: http
      port: 8080
      targetPort: http
  selector:
    app.kubernetes.io/name: fe-${APP_NAME}
    app.xyz.ink/name: fe-${APP_NAME}
  type: ClusterIP
  sessionAffinity: None
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  internalTrafficPolicy: Cluster
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: fe-${APP_NAME}
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/component: web
    app.kubernetes.io/name: fe-${APP_NAME}
    app.kubernetes.io/version: ${VERSION}
    app.xyz.ink/name: fe-${APP_NAME}
    app.xyz.ink/version: ${VERSION}
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # 定义服务识别变量
      set $service_name "";

      # 识别服务路径
      if ($request_uri ~* "^/svc/conf-mgmt/") {
        set $service_name "conf-mgmt";
      }
      if ($request_uri ~* "^/svc/tb-core/") {
        set $service_name "tb-core";
      }

      # 服务路径重写规则
      if ($service_name = tb-core) {
        # Thingsboard核心微服务
        rewrite "^/svc/tb-core/(.*)" /$1 break;  # /svc/tb-core/xxx → /xxx
      }
      if ($service_name = conf-mgmt) {
        # 会议室管理微服务
        rewrite "^/svc/conf-mgmt/(.*)" /$1 break;  # /svc/conf-mgmt/xxx → /xxx
      }
    nginx.ingress.kubernetes.io/server-snippet: |
      location / {
        try_files $uri $uri/ /index.html;
      }
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  ingressClassName: nginx-ing
  tls:
    - hosts:
        - '*.gzv-k8s.xyz.ink'
      secretName: gzv-k8s.xyz.ink-cert
  rules:
    - host: d-fe-${APP_NAME}.gzv-k8s.xyz.ink
      http:
        paths:
          # 后端接口服务地址配置
          - path: /svc/(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: ${BACKEND_SVC_NAME}
                port:
                  number: 21080
          # 前端服务规则
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: fe-${APP_NAME}
                port:
                  number: 8080
